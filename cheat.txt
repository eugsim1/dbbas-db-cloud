Practices for Lesson 2: Hybrid Cloud DR: 
Overview and Special Considerations

#Practice 2-1: Enabling Transparent Data Encryption 
#(Tablespace Encryption) in Primary Database

##3. Create a Password File.
##a. Move the existing password file:
cd $ORACLE_HOME/dbs
mv orapwORCL orapwORCL_bkp


orapwd file=orapwORCL password=<password>
ls -lrt

##4. Create Wallet directories for the ORCL database:
mkdir -p /u01/app/oracle/admin/ORCL/tde_wallet
mkdir -p /u01/app/oracle/admin/ORCL/db_wallet

#5. Set the wallet location in sqlnet.ora on the primary database server.
#Edit the sqlnet.ora file to update the wallet location as below (highlighted in yellow).
cd $ORACLE_HOME/network/admin
cat sqlnet.ora

ENCRYPTION_WALLET_LOCATION =
(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=/u01/app/oracle/adm
in/ORCL/tde_wallet)))
WALLET_LOCATION =
(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=/u01/app/oracle/adm
in/ORCL/db_wallet)))


sqlplus / as sysdba

#7. Create the password-based keystore.
#Note: Be sure to substitute <password> with the actual password you have used in the
#newly created orapwd password file for the next couple of steps.
ADMINISTER KEY MANAGEMENT CREATE KEYSTORE '/u01/app/oracle/admin/ORCL/tde_wallet' 
IDENTIFIED BY "<password>";


#8. Open the wallet.
ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY "<password>";

#9. Set the Encryption Key.
ADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY "<password>" WITH BACKUP USING 'TDE';


#10. Create an Auto-login wallet.
#An Auto-login wallet removes the requirement of manually opening the wallet when the
#database is started

ADMINISTER KEY MANAGEMENT CREATE AUTO_LOGIN KEYSTORE FROM
KEYSTORE '/u01/app/oracle/admin/ORCL/tde_wallet' IDENTIFIED BY "<password>";

#11. Ensure that the wallet is open.
SELECT wrl_parameter, status, wallet_type FROM v$encryption_wallet;

#12. Restart the database.
shutdown immediate;
startup


#13. Verify the wallet status.
SELECT wrl_parameter, status, wallet_type FROM v$encryption_wallet;



#14. To create and activate the master encryption key in a PDB, perform the following steps:
#a. Close the auto-login keystore in root.
ADMINISTER KEY MANAGEMENT SET KEYSTORE close;
 
#b. Reopen the keystore by executing the following command:
ADMINISTER KEY MANAGEMENT SET KEYSTORE open IDENTIFIED BY "<password>";

#c. Set the container to the PDB and executing the following command:
alter session set container=PDB1;
 
alter pluggable database PDB1 open;

ADMINISTER KEY MANAGEMENT SET KEYSTORE open IDENTIFIED BY "<password>";
 
ADMINISTER KEY MANAGEMENT SET KEY USING TAG 'tag' IDENTIFIED BY "<password>" WITH backup;

SELECT wrl_parameter, status, wallet_type FROM v$encryption_wallet;


sqlplus / as sysdba
shutdown immediate;


SELECT wrl_parameter, status, wallet_type FROM v$encryption_wallet;

alter session set container=PDB1;
alter pluggable database PDB1 open;

SELECT wrl_parameter, status, wallet_type FROM v$encryption_wallet;

#1. Log in to the On-Prem VM using a graphical user interface (GUI) connection utility as the
#oracle user, open a terminal window, and execute the following commands:
su - oracle
Password: *******
nohup: appending output to `nohup.out'
<press enter>
[1]+ Exit 1 nohup vncconfig

#2. Set the ORACLE environment.
#Execute. oraenv to set the database environment.
. oraenv
ORACLE_SID = [ORCL] ? ORCL


#3. Connect to the Pluggable database.
sqlplus / as sysdba

select name from v$database;
show pdbs;

#4. Create the TEST tablespace in the Pluggable database PDB1.
create tablespace TEST datafile '/u01/app/oracle/oradata/ORCL/PDB1/test01.dbf' size 1G
autoextend on maxsize unlimited;

#5. Create user drtest in Pluggable database PDB1.
create user drtest identified by drtest default tablespace TEST;

grant connect,create session,unlimited tablespace,resource to drtest;
 
 
#6. Connect using the drtest user and create the emp_details table.

conn drtest/drtest@PDB1
create table emp_details(name varchar(10), id number);
insert into emp_details values('Peter',01);
insert into emp_details values('Sam',02);
insert into emp_details values('Jack',03);
commit;

select * from emp_details

#Practice 2-3: Configuring Standby Redo Logs in Primary Database
#Overview
#In this practice, you will create standby redo logs for the primary on-premises database. 
#This will be required in case of switchovers. 
#The standby redo logs should be at least as big as the largest online redo log 
#and there should be one extra group per thread compared to the online redo logs.

#2. Set the ORACLE environment.
#Execute . oraenv to set the database environment.
. oraenv
ORACLE_SID = [ORCL] ? ORCL
 

3. Check current configuration of online redo logs.
sqlplus / as sysdba

select GROUP#,MEMBERS,BYTES/1024/1024 from v$log;


select GROUP#,MEMBER from v$logfile;
#Note: There are three online redo log groups.
#4. Create Standby Redo Logs.
ALTER DATABASE ADD STANDBY LOGFILE
('/u01/app/oracle/oradata/ORCL/standby_redo01.log') SIZE 200M;

ALTER DATABASE ADD STANDBY LOGFILE
('/u01/app/oracle/oradata/ORCL/standby_redo02.log') SIZE 200M;
 
ALTER DATABASE ADD STANDBY LOGFILE
('/u01/app/oracle/oradata/ORCL/standby_redo03.log') SIZE 200M;
 
ALTER DATABASE ADD STANDBY LOGFILE
('/u01/app/oracle/oradata/ORCL/standby_redo04.log') SIZE 200M;



#Practices for Lesson 3:
#Target Disaster Recovery Infrastructure





#Practices for Lesson 4:
#Managing Network Access to Database Cloud Service
#1. Connect to the Cloud VM as the oracle user.
#Open a new terminal window on the On-Prem VM and connect to the Cloud VM as the
#oracle user as shown in Practice 3-2. Keep this session active through this practice. This
#will be referred to as the target terminal window.
cd .ssh
ssh -i your_privatekey file oracle@your_Cloud_VM_IP_address


cd $ORACLE_HOME/network/admin
ls sqlnet.ora

#3. View the sqlnet.ora file and confirm that it contains the following parameter settings:
SQLNET.ENCRYPTION_SERVER = required
SQLNET.CRYPTO_CHECKSUM_SERVER = required
oracle@MYDR admin]$ cat sqlnet.ora
SQLNET.ENCRYPTION_SERVER = required
SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER = (SHA1)
SQLNET.CRYPTO_CHECKSUM_SERVER = required


#a. Connect to the Cloud database ORCL.
sqlplus / as sysdba
#b. Check banner information for the available encryption service and the cryptochecksumming (integrity) service.

select network_service_banner from v$session_connect_info
where sid in (select distinct sid from v$mystat);


#b. Check banner information for the available encryption service and the cryptochecksumming (integrity) service.
select network_service_banner from v$session_connect_info
where sid in (select distinct sid from v$mystat);

#create ssl tunnel
# target-port is the port number to which you want to create a tunnel
cd .ssh
ssh -i privateKey -L 1522:111.22.33.444:1521 opc@111.22.33.444

. oraenv
ORACLE_SID = [oracle] ? ORCL
 
cd $ORACLE_HOME/network/admin
cat tnsnames.ora

#c. Edit the tnsnames.ora file to make an entry for the database hosted on Cloud VM.
STBY =
(DESCRIPTION =
(ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1522))
(CONNECT_DATA =
(SERVER = DEDICATED)
(SERVICE_NAME = ORCL.<identitydomain>.oraclecloud.internal)
)
)

#Note: A new alias “STBY” has been created to connect to the database hosted on Cloud
#VM. To test SSH Tunneling, the “localhost” parameter has been used. For port
#forwarding, 1522 has been used.
#d. Test remote database connectivity by using SSH Tunneling. Ensure that you replace
#<password> with the DBCS administrator password.

tnsping STBY


#d. Test remote database connectivity by using SSH Tunneling. Ensure that you replace
#<password> with the DBCS administrator password.
tnsping STBY

sqlplus sys/<password>@STBY as sysdba

#Note: If you face a broken SSH Tunnel issue in any of the practices, perform the following step
#to re-establish the tunnel in the SSH TUNNEL Terminal window. Once done, you can continue
#with the practice.

ssh -i privateKey -L 1522:111.22.33.444:1521 opc@111.22.33.444




#Practices for Lesson 5:
#Enabling Disaster Recovery on Oracle Database Cloud

#Log in to the On-Prem VM using a graphical user interface (GUI) connection utility as the
#oracle user, and then open a terminal window. From the terminal menu, select Terminal >
#Set Title, then enter PRIMARY in the dialog box, and click OK. Keep this PRIMARY terminal
#window active through this practice, this will be referred to as the primary terminal
#window.
su - oracle
nohup: appending output to `nohup.out'

#2. Enable Archive Logging in the primary database ORCL.
#a. Connect to the primary database.
. oraenv
ORACLE_SID = [oracle] ? ORCL
sqlplus / as sysdba

archive log list

#b. Enable Archive Logging.
shutdown immediate;
startup mounted
Database mounted.
alter database archivelog;
Database altered.
alter database open;
archive log list;
alter system archive log current;

archive log list;

#3. Enable Force Logging in the primary database ORCL.
select force_logging from v$database;
ALTER DATABASE FORCE LOGGING;
Database altered.
select force_logging from v$database


#4. Set Data Guard–specific parameters.
#a. Create a parameter file (pfile) for the primary database.
show parameter spfile;

create pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora'
from spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora';

#b. Shut down the primary database.
shutdown immediate;

exit
cd /u01/app/oracle/product/12.2.0/dbhome_1/dbs/
vi initORCL.ora
cat initORCL.ora


#d. Start up the primary database with the parameter file (PFILE).
sqlplus / as sysdba
startup
pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora';

create spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora' from
pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora';
shutdown immediate;
startup

show parameter spfile;

#f. Open the pluggable database.
alter pluggable database PDB1 open;
#g. Exit SQL*Plus.
exit

#Practice 5-2: Preparing the Cloud Disaster Recovery Database
#Overview
In this practice, you will prepare the standby database on Cloud so as to instantiate the Standby
#site with respect to setting the Data Guard–specific parameters.
#1. Connect to the Cloud VM as the oracle user.
#Open a new terminal window on the On-Prem VM and connect to the Cloud VM as the
#oracle user as shown in Practice 3-2. From the terminal menu, select Terminal > Set
#Title, then enter STANDBY in the dialog box, and click OK. Keep this STANDBY terminal
#window active through this practice. This will be referred to as the standby terminal
#window.
ssh -i privateKey oracle@111.22.33.44

#2. Create a Parameter File (PFILE) from SPFILE.
cd $ORACLE_HOME/dbs
sqlplus / as sysdba
show parameter spfile;

create pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora'
from spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora';

ssh -i privateKey oracle@111.22.33.44

#2. Create a Parameter File (PFILE) from SPFILE.
cd $ORACLE_HOME/dbs
sqlplus / as sysdba
show parameter spfile;

create pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora'
from spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora';

create pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora'
from spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora';

shutdown immediate;

exit
 
#3. Back up the password file at the Standby Site.
mv orapwORCL orapwORCL_bkp

#4. Back up the Wallet file.
cd /u01/app/oracle/product/12.2.0/dbhome_1/network/admin


cat sqlnet.ora
cd /u01/app/oracle/admin/ORCL/tde_wallet
mkdir backup_wallet
mv *.* backup_wallet

#5. Back up controlfiles.
mv /u02/app/oracle/oradata/ORCL/control01.ctl /u02/app/oracle/oradata/ORCL/control01.ctl_bkp
mv /u03/app/oracle/fast_recovery_area/ORCL/control02.ctl /u03/app/oracle/fast_recovery_area/ORCL/control02.ctl_bkp

#6. Configure tnsnames.ora for the Standby site.

cd /u01/app/oracle/product/12.2.0/dbhome_1/network/admin/
cat tnsnames.ora
ORCL =
(DESCRIPTION =
(ADDRESS = (PROTOCOL = TCP)(HOST = MYDR.compute-<identitydomain>.oraclecloud.internal)(PORT = 1521))
(CONNECT_DATA =
(SERVER = DEDICATED)
(SERVICE_NAME =
ORCL.<identitydomain>.oraclecloud.internal)
)
)
PDB1 =
(DESCRIPTION =
(ADDRESS = (PROTOCOL = TCP)(HOST = MYDR.compute-<identitydomain>.oraclecloud.internal)(PORT = 1521))
(CONNECT_DATA =
(SERVER = DEDICATED)
(SERVICE_NAME =
pdb1.<identitydomain>.oraclecloud.internal)
)
)

#b. Edit the tnsnames.ora file to replace the tns alias “ORCL” with “STBY”, and save the
#file. “STBY” will be the db_unique_name of the standby site.
vi tnsnames.ora
cat tnsnames.ora
STBY =
(DESCRIPTION =
(ADDRESS = (PROTOCOL = TCP)(HOST = MYDR.compute-<
identitydomain>.oraclecloud.internal)(PORT = 1521))
(CONNECT_DATA =
(SERVER = DEDICATED)
(SERVICE_NAME =
ORCL.<identitydomain>.oraclecloud.internal)
)
)
PDB1 =
(DESCRIPTION =
(ADDRESS = (PROTOCOL = TCP)(HOST = MYDR.compute-<
identitydomain>.oraclecloud.internal)(PORT = 1521))
(CONNECT_DATA =
(SERVER = DEDICATED)
(SERVICE_NAME = pdb1.<
identitydomain>.oraclecloud.internal)
)
)


#8. Edit the Parameter file to include Data Guard–specific parameters.
cd $ORACLE_HOME/dbs
vi initORCL.ora

cat initORCL.ora
#9. Copy the password file and wallet files to Cloud VM.
#a. Connect to the primary terminal window that is active as part of Practice 5-1.
cd /home/oracle/.ssh
pwd

#b. Transfer the password file to Cloud VM.
scp -i privateKey /u01/app/oracle/product/12.2.0/dbhome_1/dbs/orapwORCL
oracle@111.22.33.444:/u01/app/oracle/product/12.2.0/dbhome_1/dbs

#c. Transfer wallet files to Cloud VM.
scp -i privateKey /u01/app/oracle/admin/ORCL/tde_wallet/*.*
oracle@111.22.33.444:/u01/app/oracle/admin/ORCL/tde_wallet

#Practice 5-3: Instantiating Data Guard (Physical Standby) on DBCS
#Overview
#In this practice, you will create a standby database on DBCS using RMAN hot backup/restore.

#Tasks
#1. Perform database backup of the Primary Database ORCL.
#a. Connect to the primary terminal window and create a backup directory.
mkdir -p /u01/app/oracle/fast_recovery_area/ORCL/hotbackup

#b. Connect by using the RMAN utility.
rman target /

run {
ALLOCATE CHANNEL RMAN_BACK_CH01 TYPE DISK;
BACKUP AS COMPRESSED BACKUPSET DATABASE FORMAT
'/u01/app/oracle/fast_recovery_area/ORCL/hotbackup/databasefiles
_%d_%u_%s_%T';
sql 'ALTER SYSTEM ARCHIVE LOG CURRENT';

BACKUP AS COMPRESSED BACKUPSET ARCHIVELOG ALL FORMAT
'/u01/app/oracle/fast_recovery_area/ORCL/hotbackup/archivelogs_%
d_%u_%s_%T';
BACKUP AS COMPRESSED BACKUPSET CURRENT CONTROLFILE FORMAT
'/u01/app/oracle/fast_recovery_area/ORCL/hotbackup/controlfile_%
d_%u_%s_%T';
}

RMAN>
#d. Exit RMAN.
exit

#e. Create Standby Controlfile.
sqlplus / as sysdba
ALTER DATABASE CREATE STANDBY CONTROLFILE AS
'/u01/app/oracle/fast_recovery_area/ORCL/hotbackup/standby.ctl';
exit

#2. Transfer Backup files to Cloud VM.
scp -i privateKey
/u01/app/oracle/fast_recovery_area/ORCL/hotbackup/*
oracle@111.22.33.444:/u03/app/oracle/fast_recovery_area


#3. Restore database on Cloud VM.
#a. Connect to the standby terminal window and start the database in nomount state.
sqlplus / as sysdba


startup nomount pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora';

#b. Restore the standby controlfile.
exit


rman target /
restore standby controlfile from '/u03/app/oracle/fast_recovery_area/standby.ctl';

#c. Mount the Standby database and check the location of backup files to be restored.
alter database mount;
report schema;

#d. Catalog backup pieces.
#Note: You can get the names of these files from the previous step where you transferred
#these files from On-Prem VM to Cloud VM.
catalog backuppiece '/u03/app/oracle/fast_recovery_area/archivelogs_ORCL_05shfini_5_
20171020';
cataloged backup piece
backup piece
handle=/u03/app/oracle/fast_recovery_area/archivelogs_ORCL_05shf
ini_5_20171020 RECID=8 STAMP=957863719
catalog backuppiece
'/u03/app/oracle/fast_recovery_area/databasefiles_ORCL_01shfiip_
1_20171020';

catalog backuppiece
'/u03/app/oracle/fast_recovery_area/databasefiles_ORCL_02shfil5_
2_20171020';


catalog backuppiece
'/u03/app/oracle/fast_recovery_area/databasefiles_ORCL_03shfim8_
3_20171020';
cataloged backup piece
backup piece
handle=/u03/app/oracle/fast_recovery_area/databasefiles_ORCL_03s
hfim8_3_20171020 RECID=11 STAMP=957863780

#e. Restore the database.
restore database;

#f. Restore archivelogs.
restore archivelog all;


#4. Start the apply process on Standby.
sqlplus / as sysdba


alter database recover managed standby database disconnect from session;
host

#Note: We are switching to OS command prompt to execute the next step after which we will
#switch back to SQL prompt.
#5. Create a Server Parameter File (SPFILE) from PFILE.
#a. Back up the current SPFILE.
mv spfileORCL.ora spfileORCL.ora_bkp
exit
exit

#b. Create an SPFILE from PFILE.
create spfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/spfileORCL.ora' from
pfile='/u01/app/oracle/product/12.2.0/dbhome_1/dbs/initORCL.ora';

exit



#Practices for Lesson 6: Data Guard Health Check and Runtime Monitoring
#Tasks
#1. Validate Redo Transport.
#The basics of Data Guard are that redo is transported from the primary and then applied on
#the standby. The following queries can be used to validate that these functions are working
#properly.
#a. Connect to the active primary terminal window.



sqlplus / as sysdba
select sysdate,status,error from v$archive_dest_status where type='PHYSICAL';

#a. On the primary terminal window, check the latest archived redo log and force a log
#switch.
ALTER SESSION SET nls_date_format='DD-MON-YYYY HH24:MI:SS';


SELECT sequence#, first_time, next_time FROM v$archived_log ORDER BY sequence#;

ALTER SYSTEM SWITCH LOGFILE;

#Note: Note down the last sequence number. As per this example it is 190.
#b. Connect to the standby terminal window and check whether the new archived redo
#log has arrived at the standby server and been applied.

ALTER SESSION SET nls_date_format='DD-MON-YYYY HH24:MI:SS';
 
SELECT sequence#, first_time, next_time, applied FROM v$archived_log ORDER BY sequence#;


#3. Monitor for Apply and Transport Time Lags.
#In the standby terminal window, run the following query to identify an apply or transport
#lag. A VALUE of ‘+00 00:00:00’ indicates no lag.

select name,value,time_computed,datum_time from v$dataguard_stats where name like '%lag%';

#4. Monitor the Standby Apply Process.
#In the standby terminal window, run the following query to monitor the standby apply
#process.

select sysdate,process,status,thread#,sequence#,block# from v$managed_standby where status!='IDLE';


#5. Monitor Recovery (advanced monitoring).
#In the standby terminal window, run the following query to gather valuable information
#about the apply process such as apply rates and apply lag.

select start_time, item, units, sofar from v$recovery_progress where START_TIME in (select max(START_TIME)
from v$recovery_progress);




#Practices for Lesson 7:
Offload Production Workload to Oracle Cloud Using Oracle Active Data Guard

#Tasks
#1. To switch the standby database into read-only mode:
#a. Connect to the standby terminal window and shut down the standby database.
shutdown immediate;

#b. Mount the standby database and then open it in read-only mode.
startup mount

alter database open read only;
 
 
show pdbs;
  
alter pluggable database PDB1 open read only;


show pdbs;

#d. Connect to the pluggable database PDB1 and verify data.
connect drtest/drtest@PDB1

select * from emp_details;

#e. Exit SQL*Plus.
exit


#2. To resume Managed Recovery, perform the following:
sqlplus / as sysdba


shutdown immediate;
startup mount
alter database recover managed standby database disconnect from session;

#Practice 7-2: Enabling Active Data Guard Real-Time Query
#Overview
#In this practice, you enable the Active Data Guard real-time query feature and verify its
#operation.

#1. To enable Active Data Guard, perform the following steps:
#a. Connect to the standby terminal window and shut down the standby database.
shutdown immediate;
 
#b. Mount the standby database and then open it in read-only mode.
startup mount

alter database open read only;

#c. Restart the Redo Apply process on the physical standby database.
alter database recover managed standby database disconnect from session;


#2. Verify Real Time Apply with Active Data Guard.
#a. Connect to the primary terminal window and log in to the pluggable database PDB1
#as the drtest user.

sqlplus drtest/drtest@PDB1


#b. Insert records into the emp_details table.
select * from emp_details;


insert into emp_details values('Andrew','4');
insert into emp_details values('Thomas','5');
commit;


select * from emp_details;
#c. Exit SQL*Plus.
exit

#d. Perform Log switches in the primary database in order to generate archive logs, which
#will be copied to the standby site.

sqlplus / as sysdba

alter system switch logfile;
alter system switch logfile;
alter system switch logfile;
#e. On the primary database, check the latest archived redo log.
alter session set nls_date_format='DD-MON-YYYY HH24:MI:SS';
SELECT sequence#, first_time, next_time FROM v$archived_log ORDER BY sequence#;

#f. Check whether the new archived redo log has arrived at the standby server and been
#applied.
#Connect to the standby terminal window and confirm that the latest archive log from
#the primary database has been applied.
alter session set nls_date_format='DD-MON-YYYY HH24:MI:SS';
SELECT sequence#, first_time, next_time, applied FROM v$archived_log ORDER BY sequence#;

#g. Verify Real Time Apply.
show pdbs;

alter pluggable database PDB1 open read only;


#Note: ORA-44309 and ORA-44777 are spurious errors and can be ignored.

connect drtest/drtest@PDB1
select * from emp_details;

#Practices for Lesson 8: RealTime Application Testing on
#Oracle Cloud by Using a Snapshot Standby Database
#Tasks
#1. Connect to the standby terminal window and shut down the standby database.
sqlplus / as sysdba
shutdown immediate;

#2. Mount the standby database.
startup mount
#3. Make sure that managed recovery is disabled.
alter database recover managed standby database cancel;


#4. Check the status of the Flashback database.
select flashback_on from v$database;

#5. Convert to Snapshot standby.
alter database convert to snapshot standby;

#6. Open the Snapshot standby database in Read Write mode.
alter database open;

select database_role, open_mode from v$database;
 
#7. Check the status of the Flashback database.
select flashback_on from v$database;

#8. Open the pluggable database PDB1 in Read Write mode.
show pdbs;
 
alter pluggable database PDB1 open;
show pdbs;


#9. Connect to the pluggable database PDB1 with the drtest user and create the
#test_snap table.
conn drtest/drtest@PDB1
create table test_snap(x varchar2(10));

insert into test_snap values('Test Snap');

commit;
select * from test_snap;

#Practice 8-2: Converting a Snapshot Standby Database to a Physical
#Standby Database

#Tasks
#1. Connect to the standby terminal window and shut down the snapshot standby database.
sqlplus / as sysdba

shutdown immediate;

#2. Mount the standby database.
startup mount

#3. Convert to physical standby database from snapshot standby.
alter database convert to physical standby;

select database_role, open_mode from v$database;

#4. Open the physical standby database in read-only mode.
alter database open read only;

#5. Restart the Redo Apply process on the physical standby database.
alter database recover managed standby database disconnect from session;

#6. Open the pluggable database PDB1 in read-only mode.
show pdbs;
alter pluggable database PDB1 open read only;
show pdbs;

#7. Verify that the test_snap table that was created in Practice 8-1 no longer exists. The
#table is not expected to be present because we are reverting the snapshot standby
#database to physical standby database.
connect drtest/drtest@PDB1

select * from test_snap;
exit




### 9
alter database switchover to STBY verify;
#Verify that the primary and standby databases are in SYNC by using SQL.
#Check the max sequence number on the primary database.
select max(sequence#),thread# from v$log_history group by thread#;
#c. Connect to the standby terminal window and check the status and sequence number
#on the standby database. If you have disconnected from the SQL session, connect sys
#as sysdba.
select process,sequence#,thread#,status from v$managed_standby;
select max(sequence#),thread# from v$archived_log group by thread#;

#Perform Switchover Operation.
#a. Connect to the primary terminal window and issue the following command:
select db_unique_name,database_role,switchover_status from v$database;

#b. Perform role transition.
alter database switchover to STBY;

#d. Monitor database alert log file for successful role transition at Primary ( to Standby).
#Note: This will take some time.
tail -100f /u01/app/oracle/diag/rdbms/orcl/ORCL/trace/alert_ORCL.log

#e. Connect to the standby terminal window and monitor the database alert log file for
#successful role transition at DR (to Primary).
tail -100f /u01/app/oracle/diag/rdbms/stby/ORCL/trace/alert_ORCL.log


#f. Now DBCS database on Oracle Cloud is your Primary database. 
#Open the Primary database on Cloud.
sqlplus / as sysdba

select status from v$instance;
alter database open;

select db_unique_name,database_role from v$database;

#Note: The database role for the cloud database should change to “PRIMARY” as highlighted in
#yellow.
#g. Open the pluggable database PDB1.
show pdbs;

alter pluggable database PDB1 open;

show pdbs;

#h. Verify data on Cloud.
alter session set container=PDB1;
show con_name;
select * from drtest.emp_details;


#. Connect to the primary terminal window and check for role transition.
sqlplus / as sysdba
startup mount
select db_unique_name,database_role from v$database;

#Note: The database role for the on-premises database should change to “PHYSICAL
#STANDBY” as highlighted 